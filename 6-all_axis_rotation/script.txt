// Set Global constants
const PI = Math.PI;
const cos = Math.cos;
const sin = Math.sin;

function initShaderProgram(vsSource, fsSource)
{
	const vShader = loadShader(webgl.VERTEX_SHADER, vsSource);
	const fShader = loadShader(webgl.FRAGMENT_SHADER, fsSource);
	
	const program = webgl.createProgram();
	webgl.attachShader(program, vShader);
	webgl.attachShader(program, fShader);
	webgl.linkProgram(program);

	if (!webgl.getProgramParameter(program, webgl.LINK_STATUS))
	{
	alert(`program ${webgl.getProgramInfoLog(program)}`);
	return;
	}
	return program;
}
function loadShader(type, source)
{
	const shader = webgl.createShader(type);
	webgl.shaderSource(shader, source);
	webgl.compileShader(shader);
	
	if (!webgl.getShaderParameter(shader, webgl.COMPILE_STATUS))
	{
	alert(`shader ${webgl.getShaderInfoLog(shader)}`);
	webgl.deleteShader(shader);
	return;
	}
	return shader;
}
function initBuffer(pts)
{
	const buffer = webgl.createBuffer();
	webgl.bindBuffer(webgl.ARRAY_BUFFER, buffer);
	webgl.bufferData(webgl.ARRAY_BUFFER, new Float32Array(pts), webgl.STATIC_DRAW);
	return buffer;
}
// handle buttons
const buttons = document.querySelectorAll(".btn");
buttons.forEach((btn) => {
	btn.addEventListener("click", function () {
		const currentState = parseInt(btn.getAttribute("data-state"));
		// update state
		const newState = (currentState === 1 ? -1 : 1);
		btn.setAttribute("data-state", newState);

		// update button
		btn.textContent = (newState === 1 ? `stop` : `start`);
	});
});

// define draw
const dA = PI / 180;
const dB = PI / 180;
const dC = PI / 180;
let shift = [0, 0];
let A = 0;	// offset initial rotation angle about x-axis
let B = 0;	// offset initial rotation angle about y-axis
let C = 0;	// offset initial rotation angle about z-axis
function draw()
{
	webgl.clearColor(0.90, 0.90, 0.90, 1.0);
	webgl.clear(webgl.COLOR_BUFFER_BIT);
	let state = [];
	buttons.forEach((btn) => {

		state.push(
			parseInt(btn.getAttribute("data-state"))
		);
	});
	let rot_x = new Float32Array([
		1, 0, 0, 0,
		0, cos(A), sin(A), 0,
		0, sin(A), cos(A), 0,
		0, 0, 0, 1,
	]);
	let rot_y = new Float32Array([
		cos(B), 0, -sin(B), 0,
		0, 1, 0, 0,
		sin(B), 0, cos(B), 0,
		0, 0, 0, 1,
	]);
	let rot_z = new Float32Array([
		cos(C), -sin(C), 0, 0,
		sin(C), cos(C), 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1,
	]);
	let idMatrix = new Float32Array([
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1,
	]);
	let i = 0;
	const axis = [rot_x, rot_y, rot_z, idMatrix];
	buttons.forEach((btn) => {
		const state = parseInt(btn.getAttribute("data-state"));
		if (state == 1) {
			if (i == 0) {
				A += dA;
			} else if (i == 1) {
				B += dB;
			} else {
				C += dC;
			}
			webgl.uniformMatrix4fv(
			p_info.axis[i],
			webgl.FALSE,
			axis[i]
		);
		} else {
			webgl.uniformMatrix4fv(
				p_info.axis[i],
				webgl.FALSE,
				axis[3],
			);
		};
		console.log(`i = ${i}`);
		i++;
	});
	
	console.log(`A: ${A}		B: ${B}		C:${C}`);
	webgl.drawArrays(webgl.TRIANGLES, 0, 3);
	requestAnimationFrame(draw);
}

// Define sources
const vsSource = `
precision mediump float;
attribute vec3 pos;
attribute vec3 color;

uniform mat4 rot_x;
uniform mat4 rot_y;
uniform mat4 rot_z;
uniform vec2 shift;

varying vec3 fragColor;
void main()
{
	fragColor = color;
	gl_Position = rot_x * rot_y * rot_z * vec4(
		pos.x,
		pos.y,
		0.0,
		1.0
	);
	gl_PointSize = 15.0;
}`
const fsSource = `
precision mediump float;

varying vec3 fragColor;
void main()
{
	gl_FragColor = vec4(fragColor, 1.0);
}`

// start main program
const canvas = document.querySelector(`canvas`);
const webgl = canvas.getContext(`webgl`);
if (!webgl){
	alert(`WebGL not supported`);
}
const program = initShaderProgram(vsSource, fsSource);
let vertices = [
	0.0, 0.25,	1.0, 0.0, 0.0,
	-0.25, -0.25,	0.0, 1.0, 0.0,
	0.25, -0.25,	0.0, 0.0, 1.0,
];
const buffer = initBuffer(vertices);
webgl.useProgram(program);
const p_info = {
	buffer,
	pos: webgl.getAttribLocation(program, `pos`),
	color: webgl.getAttribLocation(program, `color`),
	axis: [
		webgl.getUniformLocation(program, `rot_x`),
		webgl.getUniformLocation(program, `rot_y`),
		webgl.getUniformLocation(program, `rot_z`),
	],
	shift: webgl.getUniformLocation(program, `shift`),
}
// enable vertex
webgl.enableVertexAttribArray(p_info.pos);
webgl.vertexAttribPointer(
	p_info.pos,
	2,
	webgl.FLOAT,
	webgl.FALSE,
	5 * Float32Array.BYTES_PER_ELEMENT,
	0
)
webgl.enableVertexAttribArray(p_info.color);
webgl.vertexAttribPointer(
	p_info.color,
	3,
	webgl.FLOAT,
	webgl.FALSE,
	5 * Float32Array.BYTES_PER_ELEMENT,
	2 * Float32Array.BYTES_PER_ELEMENT
)
//webgl.drawArrays(webgl.TRIANGLES, 0, 3);
// call draw
draw();

